-- PROCESS FLOW
--> DDL FIRST, INSERTION NEXT, CREATE TRIGGERS, ADD MORE INSERTIONS TO TEST CONSTRAINTS AND TRIGGERS

-- ===========TARGET============
--> SELECT QUERIES
--> PERFORMANCE CHECK
--> APPLY OPTIMIZATION
--> PERFORMANCE CHECK

--> DOCUMENT RESULTS

-- EXECUTION TIME: 1 HOUR

-- ADD ONS
-- ADD CHECK FOR DATE OF BIRTH
-- LOAN REPAYMENT STATUS TRIGGER




--DDL

-- DB AND SCHEMA CREATION

CREATE DATABASE loan_management_system ENCODING 'UTF-8';
CREATE SCHEMA IF NOT EXISTS public;

-- ENTITY CREATION

CREATE TABLE COMPANY (
  ID SERIAL PRIMARY KEY,
  NAME VARCHAR(255) NOT NULL,
  LICENSE_NUMBER VARCHAR(100) NOT NULL UNIQUE,
  EMAIL VARCHAR(50) NOT NULL UNIQUE,
  ESTABLISHMENT_DATE DATE NOT NULL
);

CREATE TABLE COMPANY_OFFICE_ADDRESS (
  COMP_ID SERIAL NOT NULL,
  STREET_NAME VARCHAR(255) NOT NULL,
  CITY VARCHAR(50) NOT NULL,
  COUNTRY VARCHAR(50) NOT NULL,
  POSTCODE VARCHAR(15) NOT NULL,
  EMAIL VARCHAR(50),
  PRIMARY KEY (COMP_ID, STREET_NAME, POSTCODE),
  CONSTRAINT COMPANY_FK FOREIGN KEY (COMP_ID) REFERENCES COMPANY(ID)
);

CREATE TABLE SYS_USER ( -- TABLE USER as USER is a reserved keyword in postgres
    ID SERIAL PRIMARY KEY,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    SSN VARCHAR(30) NOT NULL UNIQUE,
    EMAIL VARCHAR(50) NOT NULL UNIQUE,
    PHONE_NUMBER VARCHAR(20) NOT NULL UNIQUE,
    DATE_OF_BIRTH DATE NOT NULL,
    COMP_ID INTEGER NOT NULL,
    CONSTRAINT COMPANY_FK FOREIGN KEY (COMP_ID) REFERENCES COMPANY (ID)
);

CREATE TYPE ADDRESS AS (
    STREET_NAME VARCHAR(255),
    POSTCODE VARCHAR(15),
    CITY VARCHAR(50),
    COUNTRY VARCHAR(50)
);

CREATE TABLE BORROWER (
    ID SERIAL REFERENCES SYS_USER(ID),
    ADDRESS ADDRESS NOT NULL,
    PHOTO_ID VARCHAR(255) NOT NULL,
    KYC_COMPLETED BIT(1) NOT NULL DEFAULT '0',
    BANK_ACCOUNT_NUMBER VARCHAR(20),
    BANK_SORT_CODE VARCHAR(20),
    PRIMARY KEY (ID)
);

CREATE TABLE COMPANY_OFFICIAL (
    ID SERIAL REFERENCES SYS_USER(ID),
    ROLE CHAR(20) CHECK (ROLE IN ('ADMIN', 'SUPERVISOR', 'MARKETER')),
    SUPERVISOR_ID INTEGER DEFAULT NULL,
    CONSTRAINT SUPERVISOR_FK FOREIGN KEY (SUPERVISOR_ID) REFERENCES COMPANY_OFFICIAL(ID),
    PRIMARY KEY (ID)
);

CREATE TABLE LOAN_PACKAGE (
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(255) NOT NULL,
    INTEREST_RATE NUMERIC NOT NULL,
    COMP_ID INTEGER NOT NULL,
    FLAG CHAR(20) NOT NULL CHECK ( FLAG IN ('ENABLED', 'DISABLED')),
    CONSTRAINT COMPANY_FK FOREIGN KEY (COMP_ID) REFERENCES COMPANY (ID)
);

CREATE TABLE LOAN_APPLICATION (
    ID SERIAL PRIMARY KEY,
    APPLICATION_NO INTEGER NOT NULL,
    AMOUNT NUMERIC NOT NULL CHECK (AMOUNT > 0),
    INTEREST_RATE NUMERIC NOT NULL,
    DATE_CREATED DATE NOT NULL DEFAULT CURRENT_DATE,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    BORROWER_ID INTEGER NOT NULL,
    LOAN_PACKAGE_ID INTEGER NOT NULL,
    COMP_ID INTEGER NOT NULL ,
    STATUS CHAR(20) NOT NULL CHECK (STATUS IN ('PENDING', 'APPROVED', 'REJECTED')),
    CONSTRAINT COMPANY_FK FOREIGN KEY (COMP_ID) REFERENCES COMPANY (ID),
    CONSTRAINT BORROWER_FK FOREIGN KEY (BORROWER_ID) REFERENCES BORROWER (ID),
    CONSTRAINT LOAN_PACKAGE_FK FOREIGN KEY (LOAN_PACKAGE_ID) REFERENCES LOAN_PACKAGE (ID),
    CONSTRAINT VALID_DATE CHECK (START_DATE <= END_DATE)
);

CREATE TABLE APPROVAL_GROUP (
    ID SERIAL PRIMARY KEY,
    GROUP_NAME VARCHAR(255) NOT NULL,
    COMP_ID INTEGER NOT NULL,
    LOAN_PACKAGE_ID INTEGER NOT NULL,
    CONSTRAINT COMPANY_FK FOREIGN KEY (COMP_ID) REFERENCES COMPANY (ID),
    CONSTRAINT LOAN_PACKAGE_FK FOREIGN KEY (LOAN_PACKAGE_ID) REFERENCES LOAN_PACKAGE (ID)
);

CREATE TABLE APPROVAL_USER_GROUP (
    ID SERIAL PRIMARY KEY,
    GROUP_ID INTEGER NOT NULL,
    COMPANY_OFFICIAL_ID INTEGER NOT NULL,
    CONSTRAINT COMPANY_FK FOREIGN KEY (COMPANY_OFFICIAL_ID) REFERENCES COMPANY_OFFICIAL (ID),
    CONSTRAINT APPROVAL_GROUP_FK FOREIGN KEY (GROUP_ID) REFERENCES APPROVAL_GROUP (ID)
);

CREATE TABLE LOAN_APPROVAL (
    ID SERIAL PRIMARY KEY,
    COMMENTS VARCHAR(512),
    APPROVAL_GROUP_ID INTEGER,
    LOAN_APPLICATION_ID INTEGER NOT NULL,
    APPROVAL_STATUS CHAR(20) NOT NULL CHECK ( APPROVAL_STATUS IN ('PENDING', 'APPROVED', 'REJECTED')) DEFAULT 'PENDING',
    CONSTRAINT APPROVAL_GROUP_FK FOREIGN KEY (APPROVAL_GROUP_ID) REFERENCES APPROVAL_GROUP (ID),
    CONSTRAINT LOAN_APPLICATION_FK FOREIGN KEY (LOAN_APPLICATION_ID) REFERENCES LOAN_APPLICATION (ID)
);

CREATE TABLE LOAN (
    ID SERIAL PRIMARY KEY,
    LOAN_APPLICATION_ID INTEGER NOT NULL,
    BORROWER_ID INTEGER NOT NULL,
    PRINCIPAL_AMOUNT NUMERIC NOT NULL,
    TOTAL_PAYABLE NUMERIC NOT NULL,
    INTEREST_RATE NUMERIC NOT NULL,
    DATE_CREATED DATE NOT NULL DEFAULT CURRENT_DATE,
    START_DATE DATE NOT NULL,
    END_DATE DATE,
    STATUS CHAR(20) NOT NULL CHECK ( STATUS IN ('PENDING_DISBURSEMENT', 'DISBURSED', 'REPAID')) DEFAULT 'PENDING_DISBURSEMENT',
    CONSTRAINT BORROWER_FK FOREIGN KEY (BORROWER_ID) REFERENCES BORROWER (ID),
    CONSTRAINT LOAN_APPLICATION_FK FOREIGN KEY (LOAN_APPLICATION_ID) REFERENCES LOAN_APPLICATION (ID),
    CONSTRAINT VALID_AMOUNT CHECK (PRINCIPAL_AMOUNT > 0),
    CONSTRAINT VALID_DATE CHECK (START_DATE <= END_DATE)
);

CREATE TABLE LOAN_DISBURSEMENT (
    ID SERIAL PRIMARY KEY,
    LOAN_ID INTEGER NOT NULL UNIQUE, -- UNIQUE EMPHASISES ONE TO ONE MAPPING
    BORROWER_ID INTEGER NOT NULL,
    DATE_CREATED DATE NOT NULL DEFAULT CURRENT_DATE,
    BANK_ACCOUNT_NUMBER VARCHAR(20) NOT NULL,
    BANK_SORT_CODE VARCHAR(20) NOT NULL,
    CONSTRAINT BORROWER_FK FOREIGN KEY (BORROWER_ID) REFERENCES BORROWER (ID),
    CONSTRAINT LOAN_FK FOREIGN KEY (LOAN_ID) REFERENCES LOAN (ID) ON DELETE CASCADE
);

CREATE TABLE LOAN_REPAYMENT (
    ID SERIAL PRIMARY KEY,
    LOAN_ID INTEGER NOT NULL,
    BORROWER_ID INTEGER NOT NULL,
    PAYMENT_DATE DATE NOT NULL,
    AMOUNT NUMERIC NOT NULL,
    CONSTRAINT BORROWER_FK FOREIGN KEY (BORROWER_ID) REFERENCES BORROWER (ID),
    CONSTRAINT LOAN_FK FOREIGN KEY (LOAN_ID) REFERENCES LOAN (ID),
    CONSTRAINT VALID_AMOUNT CHECK (AMOUNT > 0)
);

-- TRIGGERS START

-- TRIGGER TO CREATE_LOAN_APPROVAL ON CREATING A NEW LOAN APPLICATION
CREATE OR REPLACE FUNCTION CREATE_LOAN_APPROVAL() RETURNS TRIGGER
AS
$$
BEGIN
    INSERT INTO LOAN_APPROVAL(APPROVAL_STATUS, LOAN_APPLICATION_ID)
    VALUES (NEW.STATUS, NEW.ID);
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE TRIGGER LOAN_APPLICATION_APPROVAL_TRIGGER
    AFTER INSERT ON LOAN_APPLICATION
    FOR EACH ROW
    EXECUTE FUNCTION CREATE_LOAN_APPROVAL();


-- TRIGGER To UPDATE LOAN APPLICATION STATUS WHEN LOAN APPROVAL STATUS CHANGES
CREATE OR REPLACE FUNCTION UPDATE_LOANAPPLICATION_STATUS() returns TRIGGER
AS
$$
BEGIN
        UPDATE LOAN_APPLICATION app
        SET STATUS = NEW.APPROVAL_STATUS
        WHERE app.ID = NEW.LOAN_APPLICATION_ID;
        return NULL;
END ;
$$ LANGUAGE plpgsql;

CREATE TRIGGER LOAN_APPROVAL_TRIGGER
    AFTER UPDATE ON LOAN_APPROVAL
    FOR EACH ROW
    WHEN (OLD.APPROVAL_STATUS IS DISTINCT FROM NEW.APPROVAL_STATUS)
    EXECUTE FUNCTION UPDATE_LOANAPPLICATION_STATUS();


-- TRIGGER To UPDATE LOAN STATUS WHEN DISBURSEMENT IS MADE FOR THE LOAN
CREATE OR REPLACE FUNCTION UPDATE_LOAN_STATUS() RETURNS TRIGGER
AS
$$
BEGIN
        UPDATE LOAN
        SET STATUS = 'DISBURSED'
        WHERE ID = NEW.LOAN_ID;
        return NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER LOAN_DISBURSEMENT_STATUS_TRIGGER
    AFTER INSERT ON LOAN_DISBURSEMENT
    FOR EACH ROW
    EXECUTE PROCEDURE UPDATE_LOAN_STATUS();

-- TRIGGERS END